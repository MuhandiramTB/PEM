export declare const ConfigurationType: {
    readonly GeneralPurpose: "GeneralPurpose";
    readonly Vector: "Vector";
    readonly TimeSeries: "TimeSeries";
    readonly NotApplicable: "NotApplicable";
};
/**
 * Configuration type of the Elasticsearch project
 */
export type ConfigurationType = (typeof ConfigurationType)[keyof typeof ConfigurationType];
export declare const HostingType: {
    readonly Hosted: "Hosted";
    readonly Serverless: "Serverless";
};
/**
 * Hosting type of the monitor resource - either Hosted deployments OR Serverless Projects.
 */
export type HostingType = (typeof HostingType)[keyof typeof HostingType];
export declare const ManagedIdentityTypes: {
    readonly SystemAssigned: "SystemAssigned";
};
/**
 * Managed identity type.
 */
export type ManagedIdentityTypes = (typeof ManagedIdentityTypes)[keyof typeof ManagedIdentityTypes];
export declare const MonitoringStatus: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Flag specifying if the resource monitoring is enabled or disabled.
 */
export type MonitoringStatus = (typeof MonitoringStatus)[keyof typeof MonitoringStatus];
export declare const Operation: {
    readonly AddBegin: "AddBegin";
    readonly AddComplete: "AddComplete";
    readonly DeleteBegin: "DeleteBegin";
    readonly DeleteComplete: "DeleteComplete";
    readonly Active: "Active";
};
/**
 * The operation for the patch on the resource.
 */
export type Operation = (typeof Operation)[keyof typeof Operation];
export declare const ProjectType: {
    readonly Elasticsearch: "Elasticsearch";
    readonly Observability: "Observability";
    readonly Security: "Security";
    readonly NotApplicable: "NotApplicable";
};
/**
 * Project type; ex: Elasticsearch / Observability / Security
 */
export type ProjectType = (typeof ProjectType)[keyof typeof ProjectType];
export declare const Status: {
    readonly InProgress: "InProgress";
    readonly Active: "Active";
    readonly Failed: "Failed";
    readonly Deleting: "Deleting";
};
/**
 * The state of monitoring.
 */
export type Status = (typeof Status)[keyof typeof Status];
export declare const TagAction: {
    readonly Include: "Include";
    readonly Exclude: "Exclude";
};
/**
 * Valid actions for a filtering tag.
 */
export type TagAction = (typeof TagAction)[keyof typeof TagAction];
