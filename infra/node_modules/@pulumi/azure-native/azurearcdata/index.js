"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.v20250301preview = exports.v20240501preview = exports.v20240101 = exports.v20230115preview = exports.SqlServerLicense = exports.SqlServerInstance = exports.SqlServerEsuLicense = exports.SqlServerDatabase = exports.SqlServerAvailabilityGroup = exports.SqlManagedInstance = exports.PostgresInstance = exports.getSqlServerLicenseOutput = exports.getSqlServerLicense = exports.getSqlServerInstanceTelemetryOutput = exports.getSqlServerInstanceTelemetry = exports.getSqlServerInstanceJobsStatusOutput = exports.getSqlServerInstanceJobsStatus = exports.getSqlServerInstanceOutput = exports.getSqlServerInstance = exports.getSqlServerEsuLicenseOutput = exports.getSqlServerEsuLicense = exports.getSqlServerDatabaseOutput = exports.getSqlServerDatabase = exports.getSqlServerAvailabilityGroupDetailViewOutput = exports.getSqlServerAvailabilityGroupDetailView = exports.getSqlServerAvailabilityGroupOutput = exports.getSqlServerAvailabilityGroup = exports.getSqlManagedInstanceOutput = exports.getSqlManagedInstance = exports.getPostgresInstanceOutput = exports.getPostgresInstance = exports.getFailoverGroupOutput = exports.getFailoverGroup = exports.getDataControllerOutput = exports.getDataController = exports.getActiveDirectoryConnectorOutput = exports.getActiveDirectoryConnector = exports.FailoverGroup = exports.DataController = exports.ActiveDirectoryConnector = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
exports.ActiveDirectoryConnector = null;
utilities.lazyLoad(exports, ["ActiveDirectoryConnector"], () => require("./activeDirectoryConnector"));
exports.DataController = null;
utilities.lazyLoad(exports, ["DataController"], () => require("./dataController"));
exports.FailoverGroup = null;
utilities.lazyLoad(exports, ["FailoverGroup"], () => require("./failoverGroup"));
exports.getActiveDirectoryConnector = null;
exports.getActiveDirectoryConnectorOutput = null;
utilities.lazyLoad(exports, ["getActiveDirectoryConnector", "getActiveDirectoryConnectorOutput"], () => require("./getActiveDirectoryConnector"));
exports.getDataController = null;
exports.getDataControllerOutput = null;
utilities.lazyLoad(exports, ["getDataController", "getDataControllerOutput"], () => require("./getDataController"));
exports.getFailoverGroup = null;
exports.getFailoverGroupOutput = null;
utilities.lazyLoad(exports, ["getFailoverGroup", "getFailoverGroupOutput"], () => require("./getFailoverGroup"));
exports.getPostgresInstance = null;
exports.getPostgresInstanceOutput = null;
utilities.lazyLoad(exports, ["getPostgresInstance", "getPostgresInstanceOutput"], () => require("./getPostgresInstance"));
exports.getSqlManagedInstance = null;
exports.getSqlManagedInstanceOutput = null;
utilities.lazyLoad(exports, ["getSqlManagedInstance", "getSqlManagedInstanceOutput"], () => require("./getSqlManagedInstance"));
exports.getSqlServerAvailabilityGroup = null;
exports.getSqlServerAvailabilityGroupOutput = null;
utilities.lazyLoad(exports, ["getSqlServerAvailabilityGroup", "getSqlServerAvailabilityGroupOutput"], () => require("./getSqlServerAvailabilityGroup"));
exports.getSqlServerAvailabilityGroupDetailView = null;
exports.getSqlServerAvailabilityGroupDetailViewOutput = null;
utilities.lazyLoad(exports, ["getSqlServerAvailabilityGroupDetailView", "getSqlServerAvailabilityGroupDetailViewOutput"], () => require("./getSqlServerAvailabilityGroupDetailView"));
exports.getSqlServerDatabase = null;
exports.getSqlServerDatabaseOutput = null;
utilities.lazyLoad(exports, ["getSqlServerDatabase", "getSqlServerDatabaseOutput"], () => require("./getSqlServerDatabase"));
exports.getSqlServerEsuLicense = null;
exports.getSqlServerEsuLicenseOutput = null;
utilities.lazyLoad(exports, ["getSqlServerEsuLicense", "getSqlServerEsuLicenseOutput"], () => require("./getSqlServerEsuLicense"));
exports.getSqlServerInstance = null;
exports.getSqlServerInstanceOutput = null;
utilities.lazyLoad(exports, ["getSqlServerInstance", "getSqlServerInstanceOutput"], () => require("./getSqlServerInstance"));
exports.getSqlServerInstanceJobsStatus = null;
exports.getSqlServerInstanceJobsStatusOutput = null;
utilities.lazyLoad(exports, ["getSqlServerInstanceJobsStatus", "getSqlServerInstanceJobsStatusOutput"], () => require("./getSqlServerInstanceJobsStatus"));
exports.getSqlServerInstanceTelemetry = null;
exports.getSqlServerInstanceTelemetryOutput = null;
utilities.lazyLoad(exports, ["getSqlServerInstanceTelemetry", "getSqlServerInstanceTelemetryOutput"], () => require("./getSqlServerInstanceTelemetry"));
exports.getSqlServerLicense = null;
exports.getSqlServerLicenseOutput = null;
utilities.lazyLoad(exports, ["getSqlServerLicense", "getSqlServerLicenseOutput"], () => require("./getSqlServerLicense"));
exports.PostgresInstance = null;
utilities.lazyLoad(exports, ["PostgresInstance"], () => require("./postgresInstance"));
exports.SqlManagedInstance = null;
utilities.lazyLoad(exports, ["SqlManagedInstance"], () => require("./sqlManagedInstance"));
exports.SqlServerAvailabilityGroup = null;
utilities.lazyLoad(exports, ["SqlServerAvailabilityGroup"], () => require("./sqlServerAvailabilityGroup"));
exports.SqlServerDatabase = null;
utilities.lazyLoad(exports, ["SqlServerDatabase"], () => require("./sqlServerDatabase"));
exports.SqlServerEsuLicense = null;
utilities.lazyLoad(exports, ["SqlServerEsuLicense"], () => require("./sqlServerEsuLicense"));
exports.SqlServerInstance = null;
utilities.lazyLoad(exports, ["SqlServerInstance"], () => require("./sqlServerInstance"));
exports.SqlServerLicense = null;
utilities.lazyLoad(exports, ["SqlServerLicense"], () => require("./sqlServerLicense"));
// Export enums:
__exportStar(require("../types/enums/azurearcdata"), exports);
// Export sub-modules:
const v20230115preview = require("./v20230115preview");
exports.v20230115preview = v20230115preview;
const v20240101 = require("./v20240101");
exports.v20240101 = v20240101;
const v20240501preview = require("./v20240501preview");
exports.v20240501preview = v20240501preview;
const v20250301preview = require("./v20250301preview");
exports.v20250301preview = v20250301preview;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure-native:azurearcdata:ActiveDirectoryConnector":
                return new exports.ActiveDirectoryConnector(name, undefined, { urn });
            case "azure-native:azurearcdata:DataController":
                return new exports.DataController(name, undefined, { urn });
            case "azure-native:azurearcdata:FailoverGroup":
                return new exports.FailoverGroup(name, undefined, { urn });
            case "azure-native:azurearcdata:PostgresInstance":
                return new exports.PostgresInstance(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlManagedInstance":
                return new exports.SqlManagedInstance(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlServerAvailabilityGroup":
                return new exports.SqlServerAvailabilityGroup(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlServerDatabase":
                return new exports.SqlServerDatabase(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlServerEsuLicense":
                return new exports.SqlServerEsuLicense(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlServerInstance":
                return new exports.SqlServerInstance(name, undefined, { urn });
            case "azure-native:azurearcdata:SqlServerLicense":
                return new exports.SqlServerLicense(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure-native", "azurearcdata", _module);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9henVyZWFyY2RhdGEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNFQUFzRTtBQUN0RSxpRkFBaUY7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWpGLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFLN0IsUUFBQSx3QkFBd0IsR0FBeUUsSUFBVyxDQUFDO0FBQzFILFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsMEJBQTBCLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO0FBSTFGLFFBQUEsY0FBYyxHQUFxRCxJQUFXLENBQUM7QUFDNUYsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7QUFJdEUsUUFBQSxhQUFhLEdBQW1ELElBQVcsQ0FBQztBQUN6RixTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7QUFHcEUsUUFBQSwyQkFBMkIsR0FBK0UsSUFBVyxDQUFDO0FBQ3RILFFBQUEsaUNBQWlDLEdBQXFGLElBQVcsQ0FBQztBQUMvSSxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLDZCQUE2QixFQUFDLG1DQUFtQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQztBQUdwSSxRQUFBLGlCQUFpQixHQUEyRCxJQUFXLENBQUM7QUFDeEYsUUFBQSx1QkFBdUIsR0FBaUUsSUFBVyxDQUFDO0FBQ2pILFNBQVMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLEVBQUMseUJB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