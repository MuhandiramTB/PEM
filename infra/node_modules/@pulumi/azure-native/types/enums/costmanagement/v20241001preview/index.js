"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WeeksOfMonth = exports.TimeframeType = exports.TimeGrainType = exports.ThresholdType = exports.SystemAssignedServiceIdentityType = exports.StatusType = exports.SettingsKind = exports.ScheduledActionStatus = exports.ScheduledActionKind = exports.ScheduleFrequency = exports.RuleStatus = exports.ReportType = exports.ReportTimeframeType = exports.ReportGranularityType = exports.ReportConfigSortingType = exports.RecurrenceType = exports.QueryColumnType = exports.PivotTypeType = exports.OperatorType = exports.MetricType = exports.KpiTypeType = exports.GranularityType = exports.FunctionType = exports.Frequency = exports.FormatType = exports.FilterItemNames = exports.FileFormat = exports.ExportType = exports.DestinationType = exports.DaysOfWeek = exports.DataOverwriteBehaviorType = exports.CultureCode = exports.CostAllocationResourceType = exports.CostAllocationPolicyType = exports.CompressionModeType = exports.ChartType = exports.CategoryType = exports.BudgetOperatorType = exports.BudgetNotificationOperatorType = exports.AccumulatedType = void 0;
exports.AccumulatedType = {
    True: "true",
    False: "false",
};
exports.BudgetNotificationOperatorType = {
    /**
     * Notification will be triggered if the evaluated cost is the same as threshold value. Note: It’s not recommended to use this OperatorType as there’s low chance of cost being exactly the same as threshold value, leading to missing of your alert. This OperatorType will be deprecated in future.
     *
     *  Supported for CategoryType(s): Cost.
     */
    EqualTo: "EqualTo",
    /**
     * Notification will be triggered if the evaluated cost is greater than the threshold value. Note: This is the recommended OperatorType while configuring Budget Alert.
     *
     *  Supported for CategoryType(s): Cost.
     */
    GreaterThan: "GreaterThan",
    /**
     * Notification will be triggered if the evaluated cost is greater than or equal to the threshold value.
     *
     *  Supported for CategoryType(s): Cost.
     */
    GreaterThanOrEqualTo: "GreaterThanOrEqualTo",
    /**
     * Notification will be triggered if any Reservations in the scope of the Reservation Utilization Alert Rule have a utilization less than the threshold percentage.
     *
     *  Supported for CategoryType(s): ReservationUtilization.
     */
    LessThan: "LessThan",
};
exports.BudgetOperatorType = {
    In: "In",
};
exports.CategoryType = {
    /**
     * A Budget that evaluates monetary cost of Azure resources against an amount, and alerts based on a configured notification threshold.
     */
    Cost: "Cost",
    /**
     * An Alert Rule that evaluates the utilization percentage of Azure Reservations, and alerts based on a configured notification threshold.
     */
    ReservationUtilization: "ReservationUtilization",
};
exports.ChartType = {
    Area: "Area",
    Line: "Line",
    StackedColumn: "StackedColumn",
    GroupedColumn: "GroupedColumn",
    Table: "Table",
};
exports.CompressionModeType = {
    Gzip: "gzip",
    None: "None",
};
exports.CostAllocationPolicyType = {
    FixedProportion: "FixedProportion",
};
exports.CostAllocationResourceType = {
    /**
     * Indicates an Azure dimension such as a subscription id or resource group name is being used for allocation.
     */
    Dimension: "Dimension",
    /**
     * Allocates cost based on Azure Tag key value pairs.
     */
    Tag: "Tag",
};
exports.CultureCode = {
    En_us: "en-us",
    Ja_jp: "ja-jp",
    Zh_cn: "zh-cn",
    De_de: "de-de",
    Es_es: "es-es",
    Fr_fr: "fr-fr",
    It_it: "it-it",
    Ko_kr: "ko-kr",
    Pt_br: "pt-br",
    Ru_ru: "ru-ru",
    Zh_tw: "zh-tw",
    Cs_cz: "cs-cz",
    Pl_pl: "pl-pl",
    Tr_tr: "tr-tr",
    Da_dk: "da-dk",
    En_gb: "en-gb",
    Hu_hu: "hu-hu",
    Nb_no: "nb-no",
    Nl_nl: "nl-nl",
    Pt_pt: "pt-pt",
    Sv_se: "sv-se",
};
exports.DataOverwriteBehaviorType = {
    OverwritePreviousReport: "OverwritePreviousReport",
    CreateNewReport: "CreateNewReport",
};
exports.DaysOfWeek = {
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
    Sunday: "Sunday",
};
exports.DestinationType = {
    AzureBlob: "AzureBlob",
    MicrosoftFabric: "MicrosoftFabric",
};
exports.ExportType = {
    Usage: "Usage",
    ActualCost: "ActualCost",
    AmortizedCost: "AmortizedCost",
    FocusCost: "FocusCost",
    PriceSheet: "PriceSheet",
    ReservationTransactions: "ReservationTransactions",
    ReservationRecommendations: "ReservationRecommendations",
    ReservationDetails: "ReservationDetails",
};
exports.FileFormat = {
    Csv: "Csv",
};
exports.FilterItemNames = {
    ReservationScope: "ReservationScope",
    ResourceType: "ResourceType",
    LookBackPeriod: "LookBackPeriod",
};
exports.FormatType = {
    Csv: "Csv",
    Parquet: "Parquet",
    Delta: "Delta",
};
exports.Frequency = {
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent until the next calendar day.
     */
    Daily: "Daily",
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent for 7 calendar days.
     */
    Weekly: "Weekly",
    /**
     * After the threshold breaches and an Alert is fired, no further alerts will be sent for 30 calendar days.
     */
    Monthly: "Monthly",
};
exports.FunctionType = {
    Sum: "Sum",
};
exports.GranularityType = {
    Daily: "Daily",
    Monthly: "Monthly",
};
exports.KpiTypeType = {
    Forecast: "Forecast",
    Budget: "Budget",
};
exports.MetricType = {
    ActualCost: "ActualCost",
    AmortizedCost: "AmortizedCost",
    AHUB: "AHUB",
};
exports.OperatorType = {
    In: "In",
    Contains: "Contains",
};
exports.PivotTypeType = {
    Dimension: "Dimension",
    TagKey: "TagKey",
};
exports.QueryColumnType = {
    /**
     * The tag associated with the cost data.
     */
    TagKey: "TagKey",
    /**
     * The dimension of cost data.
     */
    Dimension: "Dimension",
};
exports.RecurrenceType = {
    Daily: "Daily",
    Weekly: "Weekly",
    Monthly: "Monthly",
    Annually: "Annually",
};
exports.ReportConfigSortingType = {
    Ascending: "Ascending",
    Descending: "Descending",
};
exports.ReportGranularityType = {
    Daily: "Daily",
    Monthly: "Monthly",
};
exports.ReportTimeframeType = {
    WeekToDate: "WeekToDate",
    MonthToDate: "MonthToDate",
    YearToDate: "YearToDate",
    Custom: "Custom",
};
exports.ReportType = {
    Usage: "Usage",
};
exports.RuleStatus = {
    /**
     * Rule is saved but not used to allocate costs.
     */
    NotActive: "NotActive",
    /**
     * Rule is saved and impacting cost allocation.
     */
    Active: "Active",
    /**
     * Rule is saved and cost allocation is being updated. Readonly value that cannot be submitted in a put request.
     */
    Processing: "Processing",
};
exports.ScheduleFrequency = {
    /**
     * Cost analysis data will be emailed every day.
     */
    Daily: "Daily",
    /**
     * Cost analysis data will be emailed every week.
     */
    Weekly: "Weekly",
    /**
     * Cost analysis data will be emailed every month.
     */
    Monthly: "Monthly",
};
exports.ScheduledActionKind = {
    /**
     * Cost analysis data will be emailed.
     */
    Email: "Email",
    /**
     * Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
     */
    InsightAlert: "InsightAlert",
};
exports.ScheduledActionStatus = {
    /**
     * Scheduled action is saved but will not be run.
     */
    Disabled: "Disabled",
    /**
     * Scheduled action is saved and will be run.
     */
    Enabled: "Enabled",
    /**
     * Scheduled action is expired.
     */
    Expired: "Expired",
};
exports.SettingsKind = {
    Taginheritance: "taginheritance",
};
exports.StatusType = {
    Active: "Active",
    Inactive: "Inactive",
    SystemSuspended: "SystemSuspended",
};
exports.SystemAssignedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
};
exports.ThresholdType = {
    /**
     * Actual costs budget alerts notify when the actual accrued cost exceeds the allocated budget.
     */
    Actual: "Actual",
    /**
     * Forecasted costs budget alerts provide advanced notification that your spending trends are likely to exceed your allocated budget, as it relies on forecasted cost predictions.
     */
    Forecasted: "Forecasted",
};
exports.TimeGrainType = {
    /**
     * The budget will track costs in the current calendar month against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    Monthly: "Monthly",
    /**
     * The budget will track costs in the current calendar quarter against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    Quarterly: "Quarterly",
    /**
     * The budget will track costs in the current calendar year against the amount.
     *
     *  Supported for CategoryType: Cost only.
     */
    Annually: "Annually",
    /**
     * The budget will track costs in the current billing month against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    BillingMonth: "BillingMonth",
    /**
     * The budget will track costs in the current billing quarter against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    BillingQuarter: "BillingQuarter",
    /**
     * The budget will track costs in the current billing year against the amount.
     *
     *  Supported for CategoryType: Cost and Web Direct customers only.
     */
    BillingAnnual: "BillingAnnual",
    /**
     * The Reservation Utilization Alert Rule will evaluate reservations based on their 7-Day utilization percentage.
     *
     *  Supported for CategoryType: ReservationUtilization only.
     */
    Last7Days: "Last7Days",
    /**
     * The Reservation Utilization Alert Rule will evaluate reservations based on their 30-Day utilization percentage.
     *
     *  Supported for CategoryType: ReservationUtilization only.
     */
    Last30Days: "Last30Days",
};
exports.TimeframeType = {
    MonthToDate: "MonthToDate",
    BillingMonthToDate: "BillingMonthToDate",
    TheLastMonth: "TheLastMonth",
    TheLastBillingMonth: "TheLastBillingMonth",
    WeekToDate: "WeekToDate",
    Custom: "Custom",
    TheCurrentMonth: "TheCurrentMonth",
};
exports.WeeksOfMonth = {
    First: "First",
    Second: "Second",
    Third: "Third",
    Fourth: "Fourth",
    Last: "Last",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9jb3N0bWFuYWdlbWVudC92MjAyNDEwMDFwcmV2aWV3L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxzRUFBc0U7QUFDdEUsaUZBQWlGOzs7QUFHcEUsUUFBQSxlQUFlLEdBQUc7SUFDM0IsSUFBSSxFQUFFLE1BQU07SUFDWixLQUFLLEVBQUUsT0FBTztDQUNSLENBQUM7QUFPRSxRQUFBLDhCQUE4QixHQUFHO0lBQzFDOzs7O09BSUc7SUFDSCxPQUFPLEVBQUUsU0FBUztJQUNsQjs7OztPQUlHO0lBQ0gsV0FBVyxFQUFFLGFBQWE7SUFDMUI7Ozs7T0FJRztJQUNILG9CQUFvQixFQUFFLHNCQUFzQjtJQUM1Qzs7OztPQUlHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7Q0FDZCxDQUFDO0FBZ0JFLFFBQUEsa0JBQWtCLEdBQUc7SUFDOUIsRUFBRSxFQUFFLElBQUk7Q0FDRixDQUFDO0FBT0UsUUFBQSxZQUFZLEdBQUc7SUFDeEI7O09BRUc7SUFDSCxJQUFJLEVBQUUsTUFBTTtJQUNaOztPQUVHO0lBQ0gsc0JBQXNCLEVBQUUsd0JBQXdCO0NBQzFDLENBQUM7QUFTRSxRQUFBLFNBQVMsR0FBRztJQUNyQixJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osYUFBYSxFQUFFLGVBQWU7SUFDOUIsYUFBYSxFQUFFLGVBQWU7SUFDOUIsS0FBSyxFQUFFLE9BQU87Q0FDUixDQUFDO0FBT0UsUUFBQSxtQkFBbUIsR0FBRztJQUMvQixJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0NBQ04sQ0FBQztBQU9FLFFBQUEsd0JBQXdCLEdBQUc7SUFDcEMsZUFBZSxFQUFFLGlCQUFpQjtDQUM1QixDQUFDO0FBT0UsUUFBQSwwQkFBMEIsR0FBRztJQUN0Qzs7T0FFRztJQUNILFNBQVMsRUFBRSxXQUFXO0lBQ3RCOztP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