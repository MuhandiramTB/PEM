"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.listListEffectiveVirtualNetworkByNetworkGroupOutput = exports.listListEffectiveVirtualNetworkByNetworkGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Lists all effective virtual networks by specified network group.
 *
 * Uses Azure REST API version 2022-04-01-preview.
 *
 * Other available API versions: 2021-05-01-preview.
 */
function listListEffectiveVirtualNetworkByNetworkGroup(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("azure-native:network:listListEffectiveVirtualNetworkByNetworkGroup", {
        "networkGroupName": args.networkGroupName,
        "networkManagerName": args.networkManagerName,
        "resourceGroupName": args.resourceGroupName,
        "skipToken": args.skipToken,
    }, opts);
}
exports.listListEffectiveVirtualNetworkByNetworkGroup = listListEffectiveVirtualNetworkByNetworkGroup;
/**
 * Lists all effective virtual networks by specified network group.
 *
 * Uses Azure REST API version 2022-04-01-preview.
 *
 * Other available API versions: 2021-05-01-preview.
 */
function listListEffectiveVirtualNetworkByNetworkGroupOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("azure-native:network:listListEffectiveVirtualNetworkByNetworkGroup", {
        "networkGroupName": args.networkGroupName,
        "networkManagerName": args.networkManagerName,
        "resourceGroupName": args.resourceGroupName,
        "skipToken": args.skipToken,
    }, opts);
}
exports.listListEffectiveVirtualNetworkByNetworkGroupOutput = listListEffectiveVirtualNetworkByNetworkGroupOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdExpc3RFZmZlY3RpdmVWaXJ0dWFsTmV0d29ya0J5TmV0d29ya0dyb3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbmV0d29yay9saXN0TGlzdEVmZmVjdGl2ZVZpcnR1YWxOZXR3b3JrQnlOZXR3b3JrR3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNFQUFzRTtBQUN0RSxpRkFBaUY7OztBQUVqRix5Q0FBeUM7QUFJekMsMENBQTBDO0FBRTFDOzs7Ozs7R0FNRztBQUNILFNBQWdCLDZDQUE2QyxDQUFDLElBQXVELEVBQUUsSUFBMkI7SUFDOUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsb0VBQW9FLEVBQUU7UUFDL0Ysa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtRQUN6QyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCO1FBQzdDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7UUFDM0MsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTO0tBQzlCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBUkQsc0dBUUM7QUFrQ0Q7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsbURBQW1ELENBQUMsSUFBNkQsRUFBRSxJQUFpQztJQUNoSyxJQUFJLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxvRUFBb0UsRUFBRTtRQUNyRyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1FBQ3pDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7UUFDN0MsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQjtRQUMzQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVM7S0FDOUIsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNiLENBQUM7QUFSRCxrSEFRQyJ9