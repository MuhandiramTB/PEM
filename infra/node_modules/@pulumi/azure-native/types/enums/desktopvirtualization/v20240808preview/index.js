"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StopHostsWhen = exports.StartupBehavior = exports.SkuTier = exports.SetStartVMOnConnect = exports.SessionHostLoadBalancingAlgorithm = exports.SessionHostComponentUpdateType = exports.SessionHandlingOperation = exports.ScalingHostPoolType = exports.SSOSecretType = exports.RemoteApplicationType = exports.RelayUDP = exports.RegistrationTokenOperation = exports.PublicUDP = exports.PublicNetworkAccess = exports.PrivateEndpointServiceConnectionStatus = exports.PreferredAppGroupType = exports.PersonalDesktopAssignmentType = exports.PackageTimestamped = exports.ManagementType = exports.ManagedServiceIdentityType = exports.ManagedPrivateUDP = exports.LoadBalancerType = exports.HostpoolPublicNetworkAccess = exports.HostPoolType = exports.FailHealthCheckOnStagingFailure = exports.DirectUDP = exports.DayOfWeek = exports.CommandLineSetting = exports.ApplicationGroupType = void 0;
exports.ApplicationGroupType = {
    /**
     * Application group is Remote and can launch individual applications without a Desktop.
     */
    RemoteApp: "RemoteApp",
    /**
     * Application Group delivers a full expected Desktop experience
     */
    Desktop: "Desktop",
};
exports.CommandLineSetting = {
    /**
     * Cannot be launched with command line arguments.
     */
    DoNotAllow: "DoNotAllow",
    /**
     * Can optionally be launched with command line arguments.
     */
    Allow: "Allow",
    /**
     * Required to be launched with command line arguments.
     */
    Require: "Require",
};
exports.DayOfWeek = {
    Monday: "Monday",
    Tuesday: "Tuesday",
    Wednesday: "Wednesday",
    Thursday: "Thursday",
    Friday: "Friday",
    Saturday: "Saturday",
    Sunday: "Sunday",
};
exports.DirectUDP = {
    /**
     * AVD-wide settings are used to determine connection availability
     */
    Default: "Default",
    /**
     * UDP will attempt this connection type when making connections.
     */
    Enabled: "Enabled",
    /**
     * UDP will not attempt this connection type when making connections
     */
    Disabled: "Disabled",
};
exports.FailHealthCheckOnStagingFailure = {
    /**
     * Health Check will report unhealthy
     */
    Unhealthy: "Unhealthy",
    /**
     * Health Check will report NeedsAssistance
     */
    NeedsAssistance: "NeedsAssistance",
    /**
     * Health Check will not report failure
     */
    DoNotFail: "DoNotFail",
};
exports.HostPoolType = {
    /**
     * Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
     */
    Personal: "Personal",
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    Pooled: "Pooled",
    /**
     * Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
     */
    BYODesktop: "BYODesktop",
};
exports.HostpoolPublicNetworkAccess = {
    /**
     * Allows this resource to be accessed from the public network
     */
    Enabled: "Enabled",
    /**
     * Prevents this resource from being accessed from the public network
     */
    Disabled: "Disabled",
    /**
     * Allows SessionHosts to be accessed from the public network
     */
    EnabledForSessionHostsOnly: "EnabledForSessionHostsOnly",
    /**
     * Allows Clients to be accessed from the public network
     */
    EnabledForClientsOnly: "EnabledForClientsOnly",
};
exports.LoadBalancerType = {
    /**
     * Uses BreadthFirst algorithm for load balancing.
     */
    BreadthFirst: "BreadthFirst",
    /**
     * Uses DepthFirst algorithm for load balancing.
     */
    DepthFirst: "DepthFirst",
    /**
     * Maintains persistent connections.
     */
    Persistent: "Persistent",
    /**
     * Maintains multiple persistents connections.
     */
    MultiplePersistent: "MultiplePersistent",
};
exports.ManagedPrivateUDP = {
    /**
     * AVD-wide settings are used to determine connection availability
     */
    Default: "Default",
    /**
     * UDP will attempt this connection type when making connections.
     */
    Enabled: "Enabled",
    /**
     * UDP will not attempt this connection type when making connections
     */
    Disabled: "Disabled",
};
exports.ManagedServiceIdentityType = {
    None: "None",
    SystemAssigned: "SystemAssigned",
    UserAssigned: "UserAssigned",
    SystemAssigned_UserAssigned: "SystemAssigned,UserAssigned",
};
exports.ManagementType = {
    /**
     * Automated management of the hostpool
     */
    Automated: "Automated",
    /**
     * Standard management of the hostpool
     */
    Standard: "Standard",
};
exports.PackageTimestamped = {
    /**
     * Package is timestamped
     */
    Timestamped: "Timestamped",
    /**
     * Package is not timestamped, use certificate expiry date
     */
    NotTimestamped: "NotTimestamped",
};
exports.PersonalDesktopAssignmentType = {
    /**
     * Automatically assigns an available personal desktop to the user.
     */
    Automatic: "Automatic",
    /**
     * Manually assigns a specific personal desktop to the user.
     */
    Direct: "Direct",
};
exports.PreferredAppGroupType = {
    /**
     * Internal Use Only
     */
    None: "None",
    /**
     * Use Desktop Application Group
     */
    Desktop: "Desktop",
    /**
     * Use RailApplications (RemoteApp)
     */
    RailApplications: "RailApplications",
};
exports.PrivateEndpointServiceConnectionStatus = {
    /**
     * Connection is Pending
     */
    Pending: "Pending",
    /**
     * Connection was Approved
     */
    Approved: "Approved",
    /**
     * Connection was rejected
     */
    Rejected: "Rejected",
};
exports.PublicNetworkAccess = {
    /**
     * This resource is accessible from the public network.
     */
    Enabled: "Enabled",
    /**
     * This resource is not accessible from the public network.
     */
    Disabled: "Disabled",
};
exports.PublicUDP = {
    /**
     * AVD-wide settings are used to determine connection availability
     */
    Default: "Default",
    /**
     * UDP will attempt this connection type when making connections.
     */
    Enabled: "Enabled",
    /**
     * UDP will not attempt this connection type when making connections
     */
    Disabled: "Disabled",
};
exports.RegistrationTokenOperation = {
    /**
     * Delete operation
     */
    Delete: "Delete",
    /**
     * No Operation
     */
    None: "None",
    /**
     * Update Operation
     */
    Update: "Update",
};
exports.RelayUDP = {
    /**
     * AVD-wide settings are used to determine connection availability
     */
    Default: "Default",
    /**
     * UDP will attempt this connection type when making connections.
     */
    Enabled: "Enabled",
    /**
     * UDP will not attempt this connection type when making connections
     */
    Disabled: "Disabled",
};
exports.RemoteApplicationType = {
    /**
     * Built-in applications
     */
    InBuilt: "InBuilt",
    /**
     * Imported MSIX application packages
     */
    MsixApplication: "MsixApplication",
};
exports.SSOSecretType = {
    /**
     * The SSO Secret is a Shared Key.
     */
    SharedKey: "SharedKey",
    /**
     * The SSO Secret is a Certificate.
     */
    Certificate: "Certificate",
    /**
     * The SSO Secret is a SharedKey that is stored in KeyVault.
     */
    SharedKeyInKeyVault: "SharedKeyInKeyVault",
    /**
     * The SSO Secret is a Certificate that is stored in KeyVault.
     */
    CertificateInKeyVault: "CertificateInKeyVault",
};
exports.ScalingHostPoolType = {
    /**
     * Users get a new (random) SessionHost every time it connects to the HostPool.
     */
    Pooled: "Pooled",
    /**
     * Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost.
     */
    Personal: "Personal",
};
exports.SessionHandlingOperation = {
    /**
     * No action will be taken after disconnect
     */
    None: "None",
    /**
     * Session Host will be deallocated after disconnect
     */
    Deallocate: "Deallocate",
    /**
     * Session Host will hibernate after disconnect
     */
    Hibernate: "Hibernate",
};
exports.SessionHostComponentUpdateType = {
    /**
     * Agent and other agent side components are delivery schedule is controlled by WVD Infra.
     */
    Default: "Default",
    /**
     * TenantAdmin have opted in for Scheduled Component Update feature.
     */
    Scheduled: "Scheduled",
};
exports.SessionHostLoadBalancingAlgorithm = {
    /**
     * Breadth First Algorithm for Load Balancing
     */
    BreadthFirst: "BreadthFirst",
    /**
     * Depth First Algorithm for Load Balancing
     */
    DepthFirst: "DepthFirst",
};
exports.SetStartVMOnConnect = {
    /**
     * Start VM on Connect is enabled
     */
    Enable: "Enable",
    /**
     * Start VM on Connect is disabled, must use rampUpAutoStartHosts or turn on manually
     */
    Disable: "Disable",
};
exports.SkuTier = {
    Free: "Free",
    Basic: "Basic",
    Standard: "Standard",
    Premium: "Premium",
};
exports.StartupBehavior = {
    /**
     * Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts.
     */
    None: "None",
    /**
     * Session hosts with an assigned user will be started during Ramp Up
     */
    WithAssignedUser: "WithAssignedUser",
    /**
     * All personal session hosts in the hostpool will be started during ramp up.
     */
    All: "All",
};
exports.StopHostsWhen = {
    /**
     * Zero Total Sessions
     */
    ZeroSessions: "ZeroSessions",
    /**
     * Zero Active Sessions
     */
    ZeroActiveSessions: "ZeroActiveSessions",
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90eXBlcy9lbnVtcy9kZXNrdG9wdmlydHVhbGl6YXRpb24vdjIwMjQwODA4cHJldmlldy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0VBQXNFO0FBQ3RFLGlGQUFpRjs7O0FBR3BFLFFBQUEsb0JBQW9CLEdBQUc7SUFDaEM7O09BRUc7SUFDSCxTQUFTLEVBQUUsV0FBVztJQUN0Qjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0NBQ1osQ0FBQztBQU9FLFFBQUEsa0JBQWtCLEdBQUc7SUFDOUI7O09BRUc7SUFDSCxVQUFVLEVBQUUsWUFBWTtJQUN4Qjs7T0FFRztJQUNILEtBQUssRUFBRSxPQUFPO0lBQ2Q7O09BRUc7SUFDSCxPQUFPLEVBQUUsU0FBUztDQUNaLENBQUM7QUFPRSxRQUFBLFNBQVMsR0FBRztJQUNyQixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsU0FBUztJQUNsQixTQUFTLEVBQUUsV0FBVztJQUN0QixRQUFRLEVBQUUsVUFBVTtJQUNwQixNQUFNLEVBQUUsUUFBUTtJQUNoQixRQUFRLEVBQUUsVUFBVTtJQUNwQixNQUFNLEVBQUUsUUFBUTtDQUNWLENBQUM7QUFPRSxRQUFBLFNBQVMsR0FBRztJQUNyQjs7T0FFRztJQUNILE9BQU8sRUFBRSxTQUFTO0lBQ2xCOztPQUVHO0lBQ0gsT0FBTyxFQUFFLFNBQVM7SUFDbEI7O09BRUc7SUFDSCxRQUFRLEVBQUUsVUFBVTtDQUNkLENBQUM7QUFPRSxRQUFBLCtCQUErQixHQUFHO0lBQzNDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7SUFDdEI7O09BRUc7SUFDSCxlQUFlLEVBQUUsaUJBQWlCO0lBQ2xDOztPQUVHO0lBQ0gsU0FBUyxFQUFFLFdBQVc7Q0FDaEIsQ0FBQztBQU9FLFFBQUEsWUFBWSxHQUFHO0lBQ3hCOztPQUVHO0lBQ0gsUUFBUSxFQUFFLFVBQVU7SUFD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