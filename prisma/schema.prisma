generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String     @id @default(cuid())
  email                              String     @unique
  name                               String
  role                               Role       @default(EMPLOYEE)
  password                           String
  createdAt                          DateTime   @default(now())
  updatedAt                          DateTime   @updatedAt
  managerId                          String?
  feedbackGiven                      Feedback[] @relation("FeedbackGiven")
  Feedback_Feedback_receiverIdToUser Feedback[] @relation("Feedback_receiverIdToUser")
  Goal_Goal_employeeIdToUser         Goal[]     @relation("Goal_employeeIdToUser")
  managerGoals                       Goal[]     @relation("ManagerGoals")
  managerRatings                     Rating[]   @relation("ManagerRatings")
  selfRatings                        Rating[]   @relation("SelfRatings")
  User                               User?      @relation("UserToUser", fields: [managerId], references: [id])
  other_User                         User[]     @relation("UserToUser")
  notifications                      Notification[]

  @@index([managerId])
}

model Goal {
  id                         String     @id @default(cuid())
  title                      String
  description                String
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
  dueDate                    DateTime
  managerId                  String?
  employeeId                 String
  approvedAt                 DateTime?
  approvedBy                 String?
  rejectedAt                 DateTime?
  rejectedBy                 String?
  status                     GoalStatus @default(PENDING)
  managerComments            String?
  feedback                   Feedback[]
  User_Goal_employeeIdToUser User       @relation("Goal_employeeIdToUser", fields: [employeeId], references: [id])
  manager                    User?      @relation("ManagerGoals", fields: [managerId], references: [id])
  ratings                    Rating[]
  notifications              Notification[]

  @@index([managerId])
  @@index([employeeId])
}

model Rating {
  id               String   @id @default(cuid())
  goalId           String
  selfRatedById    String
  managerRatedById String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  comments         String?
  score            Int
  goal             Goal     @relation(fields: [goalId], references: [id])
  managerRatedBy   User?    @relation("ManagerRatings", fields: [managerRatedById], references: [id])
  selfRatedBy      User     @relation("SelfRatings", fields: [selfRatedById], references: [id])

  @@index([goalId])
  @@index([selfRatedById])
  @@index([managerRatedById])
}

model Feedback {
  id                             String   @id @default(cuid())
  goalId                         String
  content                        String
  givenById                      String
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  receiverId                     String
  givenBy                        User     @relation("FeedbackGiven", fields: [givenById], references: [id])
  goal                           Goal     @relation(fields: [goalId], references: [id])
  User_Feedback_receiverIdToUser User     @relation("Feedback_receiverIdToUser", fields: [receiverId], references: [id])

  @@index([goalId])
  @@index([givenById])
  @@index([receiverId])
}

model Notification {
  id          String         @id @default(cuid())
  type        NotificationType
  message     String
  isRead      Boolean        @default(false)
  createdAt   DateTime       @default(now())
  userId      String
  goalId      String?
  user        User           @relation(fields: [userId], references: [id])
  goal        Goal?          @relation(fields: [goalId], references: [id])

  @@index([userId])
  @@index([goalId])
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum GoalStatus {
  PENDING
  APPROVED
  REJECTED
  MODIFIED
  COMPLETED
}

enum NotificationType {
  GOAL_CREATED
  GOAL_UPDATED
  GOAL_APPROVED
  GOAL_REJECTED
  GOAL_MODIFIED
  GOAL_COMPLETED
  FEEDBACK_RECEIVED
  RATING_RECEIVED
}
