export declare const ByPassSelection: {
    readonly None: "None";
    readonly AzureServices: "AzureServices";
};
/**
 * Setting for trusted services.
 */
export type ByPassSelection = (typeof ByPassSelection)[keyof typeof ByPassSelection];
export declare const CapabilityHostKind: {
    readonly Agents: "Agents";
};
/**
 * Kind of this capability host.
 */
export type CapabilityHostKind = (typeof CapabilityHostKind)[keyof typeof CapabilityHostKind];
export declare const ConnectionAuthType: {
    readonly PAT: "PAT";
    readonly ManagedIdentity: "ManagedIdentity";
    readonly UsernamePassword: "UsernamePassword";
    readonly None: "None";
    readonly SAS: "SAS";
    readonly AccountKey: "AccountKey";
    readonly ServicePrincipal: "ServicePrincipal";
    readonly AccessKey: "AccessKey";
    readonly ApiKey: "ApiKey";
    readonly CustomKeys: "CustomKeys";
    readonly OAuth2: "OAuth2";
    readonly AAD: "AAD";
};
/**
 * Authentication type of the connection target
 */
export type ConnectionAuthType = (typeof ConnectionAuthType)[keyof typeof ConnectionAuthType];
export declare const ConnectionCategory: {
    readonly PythonFeed: "PythonFeed";
    readonly ContainerRegistry: "ContainerRegistry";
    readonly Git: "Git";
    readonly S3: "S3";
    readonly Snowflake: "Snowflake";
    readonly AzureSqlDb: "AzureSqlDb";
    readonly AzureSynapseAnalytics: "AzureSynapseAnalytics";
    readonly AzureMySqlDb: "AzureMySqlDb";
    readonly AzurePostgresDb: "AzurePostgresDb";
    readonly ADLSGen2: "ADLSGen2";
    readonly Redis: "Redis";
    readonly ApiKey: "ApiKey";
    readonly AzureOpenAI: "AzureOpenAI";
    readonly AIServices: "AIServices";
    readonly CognitiveSearch: "CognitiveSearch";
    readonly CognitiveService: "CognitiveService";
    readonly CustomKeys: "CustomKeys";
    readonly AzureBlob: "AzureBlob";
    readonly AzureOneLake: "AzureOneLake";
    readonly CosmosDb: "CosmosDb";
    readonly CosmosDbMongoDbApi: "CosmosDbMongoDbApi";
    readonly AzureDataExplorer: "AzureDataExplorer";
    readonly AzureMariaDb: "AzureMariaDb";
    readonly AzureDatabricksDeltaLake: "AzureDatabricksDeltaLake";
    readonly AzureSqlMi: "AzureSqlMi";
    readonly AzureTableStorage: "AzureTableStorage";
    readonly AmazonRdsForOracle: "AmazonRdsForOracle";
    readonly AmazonRdsForSqlServer: "AmazonRdsForSqlServer";
    readonly AmazonRedshift: "AmazonRedshift";
    readonly Db2: "Db2";
    readonly Drill: "Drill";
    readonly GoogleBigQuery: "GoogleBigQuery";
    readonly Greenplum: "Greenplum";
    readonly Hbase: "Hbase";
    readonly Hive: "Hive";
    readonly Impala: "Impala";
    readonly Informix: "Informix";
    readonly MariaDb: "MariaDb";
    readonly MicrosoftAccess: "MicrosoftAccess";
    readonly MySql: "MySql";
    readonly Netezza: "Netezza";
    readonly Oracle: "Oracle";
    readonly Phoenix: "Phoenix";
    readonly PostgreSql: "PostgreSql";
    readonly Presto: "Presto";
    readonly SapOpenHub: "SapOpenHub";
    readonly SapBw: "SapBw";
    readonly SapHana: "SapHana";
    readonly SapTable: "SapTable";
    readonly Spark: "Spark";
    readonly SqlServer: "SqlServer";
    readonly Sybase: "Sybase";
    readonly Teradata: "Teradata";
    readonly Vertica: "Vertica";
    readonly Pinecone: "Pinecone";
    readonly Cassandra: "Cassandra";
    readonly Couchbase: "Couchbase";
    readonly MongoDbV2: "MongoDbV2";
    readonly MongoDbAtlas: "MongoDbAtlas";
    readonly AmazonS3Compatible: "AmazonS3Compatible";
    readonly FileServer: "FileServer";
    readonly FtpServer: "FtpServer";
    readonly GoogleCloudStorage: "GoogleCloudStorage";
    readonly Hdfs: "Hdfs";
    readonly OracleCloudStorage: "OracleCloudStorage";
    readonly Sftp: "Sftp";
    readonly GenericHttp: "GenericHttp";
    readonly ODataRest: "ODataRest";
    readonly Odbc: "Odbc";
    readonly GenericRest: "GenericRest";
    readonly AmazonMws: "AmazonMws";
    readonly Concur: "Concur";
    readonly Dynamics: "Dynamics";
    readonly DynamicsAx: "DynamicsAx";
    readonly DynamicsCrm: "DynamicsCrm";
    readonly GoogleAdWords: "GoogleAdWords";
    readonly Hubspot: "Hubspot";
    readonly Jira: "Jira";
    readonly Magento: "Magento";
    readonly Marketo: "Marketo";
    readonly Office365: "Office365";
    readonly Eloqua: "Eloqua";
    readonly Responsys: "Responsys";
    readonly OracleServiceCloud: "OracleServiceCloud";
    readonly PayPal: "PayPal";
    readonly QuickBooks: "QuickBooks";
    readonly Salesforce: "Salesforce";
    readonly SalesforceServiceCloud: "SalesforceServiceCloud";
    readonly SalesforceMarketingCloud: "SalesforceMarketingCloud";
    readonly SapCloudForCustomer: "SapCloudForCustomer";
    readonly SapEcc: "SapEcc";
    readonly ServiceNow: "ServiceNow";
    readonly SharePointOnlineList: "SharePointOnlineList";
    readonly Shopify: "Shopify";
    readonly Square: "Square";
    readonly WebTable: "WebTable";
    readonly Xero: "Xero";
    readonly Zoho: "Zoho";
    readonly GenericContainerRegistry: "GenericContainerRegistry";
    readonly Elasticsearch: "Elasticsearch";
    readonly OpenAI: "OpenAI";
    readonly Serp: "Serp";
    readonly BingLLMSearch: "BingLLMSearch";
    readonly Serverless: "Serverless";
    readonly ManagedOnlineEndpoint: "ManagedOnlineEndpoint";
};
/**
 * Category of the connection
 */
export type ConnectionCategory = (typeof ConnectionCategory)[keyof typeof ConnectionCategory];
export declare const ContentLevel: {
    readonly Low: "Low";
    readonly Medium: "Medium";
    readonly High: "High";
};
/**
 * Level at which content is filtered.
 */
export type ContentLevel = (typeof ContentLevel)[keyof typeof ContentLevel];
export declare const DeploymentModelVersionUpgradeOption: {
    readonly OnceNewDefaultVersionAvailable: "OnceNewDefaultVersionAvailable";
    readonly OnceCurrentVersionExpired: "OnceCurrentVersionExpired";
    readonly NoAutoUpgrade: "NoAutoUpgrade";
};
/**
 * Deployment model version upgrade option.
 */
export type DeploymentModelVersionUpgradeOption = (typeof DeploymentModelVersionUpgradeOption)[keyof typeof DeploymentModelVersionUpgradeOption];
export declare const DeploymentScaleType: {
    readonly Standard: "Standard";
    readonly Manual: "Manual";
};
/**
 * Deployment scale type.
 */
export type DeploymentScaleType = (typeof DeploymentScaleType)[keyof typeof DeploymentScaleType];
export declare const EncryptionScopeState: {
    readonly Disabled: "Disabled";
    readonly Enabled: "Enabled";
};
/**
 * The encryptionScope state.
 */
export type EncryptionScopeState = (typeof EncryptionScopeState)[keyof typeof EncryptionScopeState];
export declare const HostingModel: {
    readonly Web: "Web";
    readonly ConnectedContainer: "ConnectedContainer";
    readonly DisconnectedContainer: "DisconnectedContainer";
    readonly ProvisionedWeb: "ProvisionedWeb";
};
/**
 * Account hosting model.
 */
export type HostingModel = (typeof HostingModel)[keyof typeof HostingModel];
export declare const KeySource: {
    readonly Microsoft_CognitiveServices: "Microsoft.CognitiveServices";
    readonly Microsoft_KeyVault: "Microsoft.KeyVault";
};
/**
 * Enumerates the possible value of keySource for Encryption
 */
export type KeySource = (typeof KeySource)[keyof typeof KeySource];
export declare const ManagedPERequirement: {
    readonly Required: "Required";
    readonly NotRequired: "NotRequired";
    readonly NotApplicable: "NotApplicable";
};
export type ManagedPERequirement = (typeof ManagedPERequirement)[keyof typeof ManagedPERequirement];
export declare const ManagedPEStatus: {
    readonly Inactive: "Inactive";
    readonly Active: "Active";
    readonly NotApplicable: "NotApplicable";
};
export type ManagedPEStatus = (typeof ManagedPEStatus)[keyof typeof ManagedPEStatus];
export declare const NetworkRuleAction: {
    readonly Allow: "Allow";
    readonly Deny: "Deny";
};
/**
 * The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.
 */
export type NetworkRuleAction = (typeof NetworkRuleAction)[keyof typeof NetworkRuleAction];
export declare const PrivateEndpointServiceConnectionStatus: {
    readonly Pending: "Pending";
    readonly Approved: "Approved";
    readonly Rejected: "Rejected";
};
/**
 * Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
 */
export type PrivateEndpointServiceConnectionStatus = (typeof PrivateEndpointServiceConnectionStatus)[keyof typeof PrivateEndpointServiceConnectionStatus];
export declare const PublicNetworkAccess: {
    readonly Enabled: "Enabled";
    readonly Disabled: "Disabled";
};
/**
 * Whether or not public endpoint access is allowed for this account.
 */
export type PublicNetworkAccess = (typeof PublicNetworkAccess)[keyof typeof PublicNetworkAccess];
export declare const RaiPolicyContentSource: {
    readonly Prompt: "Prompt";
    readonly Completion: "Completion";
};
/**
 * Content source to apply the Content Filters.
 */
export type RaiPolicyContentSource = (typeof RaiPolicyContentSource)[keyof typeof RaiPolicyContentSource];
export declare const RaiPolicyMode: {
    readonly Default: "Default";
    readonly Deferred: "Deferred";
    readonly Blocking: "Blocking";
    readonly Asynchronous_filter: "Asynchronous_filter";
};
/**
 * Rai policy mode. The enum value mapping is as below: Default = 0, Deferred=1, Blocking=2, Asynchronous_filter =3. Please use 'Asynchronous_filter' after 2025-04-01-preview. It is the same as 'Deferred' in previous version.
 */
export type RaiPolicyMode = (typeof RaiPolicyMode)[keyof typeof RaiPolicyMode];
export declare const ResourceIdentityType: {
    readonly None: "None";
    readonly SystemAssigned: "SystemAssigned";
    readonly UserAssigned: "UserAssigned";
    readonly SystemAssigned_UserAssigned: "SystemAssigned, UserAssigned";
};
/**
 * The identity type.
 */
export type ResourceIdentityType = (typeof ResourceIdentityType)[keyof typeof ResourceIdentityType];
export declare const RoutingMethods: {
    readonly Priority: "Priority";
    readonly Weighted: "Weighted";
    readonly Performance: "Performance";
};
/**
 * Multiregion routing methods.
 */
export type RoutingMethods = (typeof RoutingMethods)[keyof typeof RoutingMethods];
export declare const SkuTier: {
    readonly Free: "Free";
    readonly Basic: "Basic";
    readonly Standard: "Standard";
    readonly Premium: "Premium";
    readonly Enterprise: "Enterprise";
};
/**
 * This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
 */
export type SkuTier = (typeof SkuTier)[keyof typeof SkuTier];
